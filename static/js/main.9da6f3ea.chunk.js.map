{"version":3,"sources":["componentes/Socket.js","componentes/Chat.js","componentes/Info.js","componentes/Lines.js","componentes/Map.js","App.js","reportWebVitals.js","index.js"],"names":["socket","require","io","path","Chat","nombre","useState","mensaje","setMensaje","mensajes","setMensajes","on","console","log","connected","useEffect","data","off","divRef","useRef","current","scrollIntoView","behavior","className","map","e","i","name","message","ref","onSubmit","preventDefault","msje","emit","htmlFor","id","cols","rows","value","onChange","target","class","Info","vuelos","lista_vuelos","code","airline","origin","destination","plane","seats","passengers","a","j","age","PolylineOverlay","width","height","ctx","isDragging","project","unproject","this","props","points","color","lineWidth","renderWhileDragging","clearRect","globalCompositeOperation","strokeStyle","beginPath","forEach","point","pixel","lineTo","stroke","redraw","_redraw","bind","PureComponent","MyMap","latitude","longitude","zoom","viewport","setViewport","property","push","mapboxApiAccessToken","onViewportChange","enviado","App","setNombre","registrado","setRegistrado","setVuelos","placeholder","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9da6f3ea.chunk.js","sourcesContent":["//let socket = io(\"http://tarea-3-websocket.2021-1.tallerdeintegracion.cl/\");\r\n// let socket = io(\"//localhost:3000\");\r\n\r\n\r\nconst io = require(\"socket.io-client\");\r\nconst socket = io('wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl/', {\r\n    path: '/flights'\r\n});\r\n\r\n// Establezco conexión al server del curso\r\n//const socket = io('wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl/',{\r\n//    path: '/flights'\r\n//});\r\nexport default socket; \r\n","import React, { useState, useEffect, useRef} from 'react';\r\nimport socket from './Socket';\r\nimport '../App.css';\r\n\r\nconst Chat = ({ nombre }) => {\r\n  const [mensaje, setMensaje] = useState(\"\"); \r\n  const [mensajes, setMensajes] = useState([]);\r\n\r\n  //saber si estoy conectado\r\n  socket.on(\"connect\", () => {\r\n    console.log(socket.connected); // me tiene que decir si me conecté o no \r\n    console.log(\"Me conecté al socket\")\r\n  });\r\n\r\n  // recibir los mensajes del servidor del curso\r\n  useEffect(() => {\r\n    socket.on('CHAT', (data) => {\r\n          // aquí van los datos que obtengo del chat\r\n          setMensajes([...mensajes, data]);\r\n          console.log(data);\r\n          console.log(mensajes)\r\n          console.log(\"Bajé la data\");\r\n    })\r\n    return () => {socket.off()}\r\n  });\r\n\r\n  //para que haga scroll por si solo\r\n  const divRef = useRef(null);\r\n  useEffect(() => {\r\n    divRef.current.scrollIntoView({behavior: 'smooth'})\r\n  });\r\n  \r\n  //voy a enviar un evento al servidor de la tarea\r\n  const submit = (e) => { \r\n    e.preventDefault();\r\n    const msje = {\r\n      name: nombre, \r\n      message: mensaje\r\n    }\r\n    // var data = JSON.stringify(msje)\r\n    socket.emit('CHAT', msje);\r\n    console.log(\"Subí la data\" + msje);\r\n    //setMensajes([...mensajes, msje]);\r\n    setMensaje(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n    // el lugar donde vamos a escribir los mensajes\r\n    <div>\r\n    <div className=\"chat\">\r\n\r\n      {mensajes.map((e, i) => (\r\n        <div key={i}>\r\n          <div> <b>{e.name} </b>: {e.message}</div>\r\n        </div>\r\n      ))}\r\n      <div ref={divRef}></div>\r\n    </div>\r\n    <form onSubmit={submit}>\r\n      <div><label htmlFor=\"\">   Escriba su mensaje</label></div>\r\n      <textarea name=\"\" id=\"\" cols=\"30\" rows=\"5\" value={mensaje} onChange={(e) => setMensaje(e.target.value)}\r\n      ></textarea>\r\n      <div><button class=\"button\">Enviar</button></div>\r\n    </form>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Chat;","import '../App.css';\r\nimport React from 'react';\r\n\r\n\r\nconst Info = (vuelos) => {\r\n    var lista_vuelos = vuelos.vuelos;\r\n\r\n    return (\r\n        // el lugar donde vamos a escribir los mensajes\r\n        <div>\r\n            <div className=\"vuelos\">\r\n                {lista_vuelos.map((e, i) => (\r\n                <div key={i}>\r\n                    <div> <h1><b>Avión de código </b>: {e.code} </h1> </div>\r\n                    <div> <b>Aerolínea </b>: {e.airline}</div>\r\n                    <div> <b>Origen </b>: {e.origin} </div>\r\n                    <div> <b>Destino </b>: {e.destination}</div>\r\n                    <div> <b>Modelo </b>: {e.plane}</div>\r\n                    <div> <b>Cantidad de asientos </b>: {e.seats}</div>\r\n                    <div> <b> Personas </b>: </div>\r\n                    {e.passengers.map((a,j) => (\r\n                        <div key={j}>\r\n                            <div> <b> {a.name}: </b> de {a.age} de edad</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n\r\n      );\r\n\r\n};\r\n\r\nexport default Info;\r\n","import React, { PureComponent } from 'react'\r\nimport { CanvasOverlay } from 'react-map-gl'\r\n\r\nexport default class PolylineOverlay extends PureComponent {\r\n  _redraw ({ width, height, ctx, isDragging, project, unproject }) {\r\n    const { points, color = 'red', lineWidth = 2, renderWhileDragging = true } = this.props\r\n    ctx.clearRect(0, 0, width, height)\r\n    ctx.globalCompositeOperation = 'lighter'\r\n\r\n    if ((renderWhileDragging || !isDragging) && points) {\r\n      ctx.lineWidth = lineWidth\r\n      ctx.strokeStyle = color\r\n      ctx.beginPath()\r\n      points.forEach(point => {\r\n        const pixel = project([point[0], point[1]])\r\n        ctx.lineTo(pixel[0], pixel[1])\r\n      })\r\n      ctx.stroke()\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return <CanvasOverlay redraw={this._redraw.bind(this)} />\r\n  }\r\n}","// I tried https://github.com/FedericoTartarini/react-leaflet-tutorial/blob/part_1_getting_started/src/Components/MyMap.js\r\n// but didn't work \r\n// luego usé este https://www.youtube.com/watch?v=JJatzkPcmoI&t=701s&ab_channel=LeighHalliday\r\nimport React, { useState } from \"react\";\r\nimport ReactMapGL from \"react-map-gl\";\r\nimport PolylineOverlay from './Lines';\r\n\r\nconst MyMap = (vuelos) => {\r\n  var lista_vuelos = vuelos.vuelos;\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 0, \r\n    longitude: 0,\r\n    width: '50vw',\r\n    height: '25vw',\r\n    zoom: 0\r\n  });\r\n\r\n  var points = [];\r\n    for (const property in lista_vuelos) {\r\n      var point = [];\r\n      var e = lista_vuelos[property];\r\n\r\n      var origin = []; \r\n      origin.push(e.origin[1]);\r\n      origin.push(e.origin[0]);\r\n\r\n      var destination = []; \r\n      destination.push(e.destination[1]);\r\n      destination.push(e.destination[0]);\r\n\r\n      point.push(origin);\r\n      point.push(destination);\r\n      \r\n      points.push(point)\r\n    }\r\n  // var ejemplo = [[-58.533321,-34.82264],[-70.803203, -33.382761]];\r\n\r\n  return (\r\n        // despliegue del mapa  \r\n        // points is an array of [[lat, lon], [lat, lon], ...]\r\n        // points será el array de todos los pares de inicio y final \r\n        <div>\r\n          <ReactMapGL \r\n          {...viewport} \r\n          mapboxApiAccessToken='pk.eyJ1IjoiYWxvcnRpeiIsImEiOiJja3AyNWNoNGQxaGJ1MnZtdzV5MDU5ejdtIn0.Ih459NVdR91AZxTKOp0ufQ'\r\n          onViewportChange={(viewport) => {setViewport(viewport);\r\n          }}> \r\n          {points.map((a,j) => (\r\n              <div key={j}>\r\n                <PolylineOverlay points={a} />\r\n              </div>\r\n          ))}          \r\n          </ReactMapGL>\r\n        </div>      \r\n      );\r\n};\r\n\r\n\r\nexport default MyMap;\r\n","import React, { useState, useEffect } from 'react';\nimport Chat from './componentes/Chat';\nimport Info from './componentes/Info';\nimport './App.css';\nimport MyMap from './componentes/Map';\nimport socket from './componentes/Socket';\n\nvar enviado = 0;\n\nfunction App() {\n// setear el nombre del usuario\n  const [nombre, setNombre] = useState(\"\");\n  const [registrado, setRegistrado] = useState(false);\n\n  const registrar = (e) => {\n    // vamos a registrar el nombre y vamos a validarlo\n    e.preventDefault();\n    if (nombre !== \"\"){\n      setRegistrado(true);\n    }\n  }\n\n// bajar información de los vuelos\n  const [vuelos, setVuelos] = useState([]);\n\n  useEffect(() => {\n      console.log(\"Llegué aquí\")\n      if (enviado <2){\n          socket.emit('FLIGHTS');\n          console.log(\"mandé a pedir los aviones\");\n          enviado++;\n          };\n  });\n\n  useEffect(() => {\n      socket.on('FLIGHTS', (data) => {\n          // aquí van los datos que obtengo del chat\n          setVuelos([...data]);\n          console.log(vuelos);\n\n          console.log(\"Bajé la data de los vuelos\");\n    })\n      return () => {socket.off()}\n    });\n\n  return (\n    <div className=\"App\">\n      {\n        !registrado && \n\n        <form onSubmit={registrar}> \n          <label htmlFor=\"\"> Introduzca su nombre </label>\n          <input value={nombre} onChange={(e) => setNombre(e.target.value)} placeholder=\"Introduce nombre de usuario..\"></input>\n          <button class=\"button\">Ir a la página</button>\n        </form>\n      }\n      {\n        registrado && \n        <React.Fragment>\n          <MyMap vuelos={vuelos}></MyMap>\n          <Info vuelos={vuelos}></Info>\n          <Chat nombre={nombre}></Chat>\n        </React.Fragment>\n      }\n    </div>\n  );\n}\n// después de chat </Chat> va <MyMap />\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}